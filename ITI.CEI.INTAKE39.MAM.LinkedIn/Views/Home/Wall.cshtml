@model LinkedUserHomePageViewModel
@{
    ViewBag.Title = "Wall";
    Layout = "~/Views/Shared/_My_Layout.cshtml";
}

<style>

    * {
        margin: 0;
        padding: 0;
    }

    .body {
        background-color: #DFDFDF;
    }

    .header {
        height: 52px;
        background-color: #283e4a;
        background-image: none;
        position: relative;
    }

    .s1 {
        position: absolute;
        left: 2cm;
        top: 10px;
        color: white;
        font-size: 130%;
    }

    /* .s1::after{
        content: '\f08c';
        font-family: 'Font Awesome\ 5 Free';
         font-weight: 900;

    } */

    .s0 {
        position: absolute;
        left: 3.9cm;
        top: 10px;
        color: #0077B5;
    }

    .s2 {
        position: absolute;
        right: 6cm;
        top: 15px;
    }

    .s3 {
        position: absolute;
        right: 3cm;
        top: 15px;
        border: 1px solid white;
        padding-left: 3px;
        padding-right: 3px;
    }



    .s4 {
        position: absolute;
        left: 10px;
        font-size: 120%;
        top: 30px;
    }

    /*.container {
        width: 100%;
        margin: auto;
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: space-between;
    }*/

    .Leftdiv {
        height: 250px;
        width: 23%;
        text-align: center;
        border: 2px solid white;
        border-radius: 1px;
        background-color: white;
        margin-top: 20px;
        float: left;
        padding: 0px;
        box-shadow: 2px 2px 4px #b4b4b4;
        /*padding:20px 0px;*/
    }

    .Rightdiv {
        /*height: 250px;*/
        width: 25.5%;
        /*text-align: center;*/
        border: 2px solid white;
        background-color: white;
        margin-top: 20px;
        margin-bottom: 2px;
        padding-left:10px;
        float: left;
        box-shadow: 2px 2px 4px #b4b4b4;
    }

    .MidDiv {
        height: auto;
        width: 48%;
        margin: 20px 20px 0px 20px;
        text-align: left;
        /*border: 2px solid white;*/
        /* background-color: white; */
        margin-top: 20px;
        margin-bottom: 2px;
        align-items: center;
        float: left;
    }


    .writeapost {
        background-color: white;
        margin-bottom: 15px;
        padding: 5px 15px;
        box-shadow: 2px 2px 4px #b4b4b4;
    }

    .post_text{max-height:140px;max-width:530px;width:530px;height:140px;min-height:140px;min-width:530px;}

    .posts {
        background-color: white;
        margin-top: 5px;
        margin-bottom: 5px;
        padding: 5px;
        box-shadow: 2px 2px 4px #b4b4b4;
        padding: 5px 20px;
    }

    .comments {
        margin-top: 5px;
        margin-bottom: 5px;
       
    }

    .databasecomments{
        display:block;
        border-left:3px solid #3c88f8;
        padding-left:10px;
        margin-bottom:10px;
    }
    
    .hidecomments{
        display:none;
    }

    .activebtn {
        color: #1e56fb;
    }

    .btn_like {
        background: none;
        border: none;
        padding-right: 5px;
        border-right: 2px solid #929292;
    }

    .btn_like:hover{color:#1e56fb;
        
    }

    .btn_comment {
        background: none;
        border: none;
        padding-right:5px;
        border-right:2px solid #929292;
    }

    .btn_comment:hover {
        color: #1e56fb;
    }
    .btn_share{
        background: none;
        border: none;
    }

    .btn_share:hover{
        color: #1e56fb;
    }

    .img_post {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-size: cover;
        position: relative;
        top: 5px;
        left: 0px;
        margin: 10px 0px;
        border: 2px solid #CCC;
        float:left;
    }

    .heading_post {
        position: relative;
        top: 20px;
        left: 10px;
        float: left;
    }

    .img_comment{
        width: 30px;
        height:30px;
        border-radius: 50%;
        background-size: cover;
        position: relative;
        top: 5px;
        left: 0px;
        border: 1px solid #CCC;
        float: left;
    }

    .heading_comment{
        position: relative;
        top: 3px;
        left: 10px;
        float: left;
        width:94%;
    }

    .follow{margin-bottom:10px;overflow:hidden;
    }

    .follow_left{float:left}
    .follow_right{float:right;margin-right:10px;}
</style>


<body class="body">
    @*<div class="header">
            <span class="s1">LINKED</span>
            <span class="s0"><i class="fab fa-linkedin fa-2x"></i></span>
            <span class="s2"><a href="">Sign In</a></span>
            <span class="s3"><a href="">Join Now</a></span>

        </div>*@
    <div class="container">
        <div class="Leftdiv">
            <div style="width:100%;height:60px;;background-size:cover;background-image:url(/Images/@Model.UserAtHome.CoverURL)"></div>
            <div style="width:80px;height:80px;;background-size:cover;background-image:url(/Images/@Model.UserAtHome.ImageURL);border-radius:50%;position:relative;top:-38px;left:90px;box-shadow:1px 1px 4px grey;border:1px solid #CCC"></div>
            <h4>@Model.UserAtHome.FName&nbsp;@Model.UserAtHome.LName</h4>
            <h6>@Model.UserAtHome.Position</h6>
            <h6>Who has viewed your profile</h6>
            <h6>Connections</h6>
        </div>



        <div class="MidDiv">
            <div class="writeapost">
                <h4>Write a status</h4>
                @using (Html.BeginForm("Submit", "Home", FormMethod.Post))
                {
                    @Html.TextAreaFor(m => m.AddedPost.Content, new { @cols = "78", @rows = "5",@class="form-control post_text"})
                    @*<textarea name="status-area" id="1" cols="78" rows="5"></textarea>*@
                    <h5><button type="submit" class="btn btn-primary">Submit</button>  <button class="btn btn-default">Cancel</button></h5>
                }

            </div>
            @foreach (var item in Model.PostsAtHome)
            {
                var current_user = Model.UsersOfPosts.SingleOrDefault(c => c.Id == item.FK_LinkedInUserId);
                var FNameofPost = current_user.FName;
                var LNameOfPost = current_user.LName;

            <div class="posts">
                <div class="img_post" style="background-image:url(/Images/@current_user.ImageURL)"></div>
                @using (Html.BeginForm("GetUserById", "Account", new { id = current_user.Id }, FormMethod.Post))
                {
                    <div class="heading_post">
                        <p style="margin-bottom:3px"><button type="submit" class="btn-link">@FNameofPost</button></p>
                        <p style="font-size:13px;color:#adadad">@current_user.Position</p>
                    </div>
                }
                    <div style="clear:both"></div>
                    <p style="margin-top:15px">@item.Content</p>
                    <input type="hidden" id="postid" name="postId" value="@item.Id">

                    <h6 id="likes-@item.Id">@Model.LikesOnPosts.Where(m => m.FK_PostId == item.Id).Count() Likes</h6>
                    <p style="border-bottom:1px solid #CCC;border-top:1px solid #CCC;padding:10px 0px;">
                        @if (Model.LikesOnPosts.SingleOrDefault(c => c.FK_LinkedInUserId == Model.UserAtHome.Id && c.FK_PostId == item.Id) == null)
                        {
                            <button id="likebtn-@item.Id" onclick="makeLike(@item.Id)" class="btn_like"><i class="fas fa-thumbs-up"></i> Like</button>

                        }
                        else
                        {
                            <button class="btn_like activebtn" id="likebtn-@item.Id" onclick="makeLike(@item.Id)"><i class="fas fa-thumbs-up"></i> Like</button>
                        }

                        <button id="commentbtn-@item.Id" onclick="hidecomments(@item.Id)" class="btn_comment">Hide Comments</button>
                        <button id="sharebtn" class="btn_share">Share</button>
                    </p>

                    <div class="comments-@item.Id">

                        @foreach (var comment in Model.CommentsOnPosts.Where(m => m.FK_PostId == item.Id).ToList())
                        {
                            var current_commenter = Model.UsersOfComments.SingleOrDefault(c => c.Id == comment.FK_LinkedInUserId);
                            var FNameofComment = current_commenter.FName;

                        <div class="databasecomments" id="@comment.Id">
                            <div class="img_comment" style="background-image:url(/Images/@current_commenter.ImageURL)"></div>
                            @using (Html.BeginForm("GetUserById", "Account", new { id = current_commenter.Id }, FormMethod.Post))
                            {
                                <div class="heading_comment">
                                    <p style="margin-bottom:3px"><button type="submit" class="btn-link">@FNameofComment</button></p>
                                    <p style="font-size:13px;color:#adadad">@current_commenter.Position</p>
                                    <div style="font-size:13px;color:#000000;width:98%;">
                                        @comment.Text
                                        <div style="float:right">
                                            @{
                                                if (comment.FK_LinkedInUserId == Model.UserAtHome.Id)
                                                {
                                                    <span><button onclick="Editcomment(@item.Id,@comment.Id,'@comment.Text')" class="btn-link">Edit</button></span>
                                                    @*<span class="btn-link">Delete</span>*@
                                                    @*<div><button onclick="makeComment(@item.Id)">submit</button></div>*@

                                                }

                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                                <div style="clear:both"></div>
                                
                            </div>

                        }



                        </div>
                <p><input class="txbox form-control"  id="@item.Id" type="text" name="comment" placeholder="add a comment" /></p>
                @*<button onclick="makeComment(@item.Id)">Submit</button>*@

                </div>
            }

        </div>

     


        <div class="Rightdiv">
            <h4>People you may know</h4>

            @foreach (var friend in Model.PeopleToFollow)
            {
                if (friend.Key < 0)
                {
                    <h5 id="request-@friend.Value.Id">@friend.Value.FName @friend.Value.LName<button disabled class="btn-xs">Pending Request</button></h5>
                }
                else
                {

                <div class="follow" id="request-@friend.Value.Id">@friend.Value.FName @friend.Value.LName
                    <div class="follow_left">

                    </div>
            
                    <div class="follow_right">
                    <button  onclick="makeFriendRequest('@Model.UserAtHome.Id','@friend.Value.Id')" class="btn-xs btn btn-primary">+Follow</button>

                    </div>
            
                </div>
                }
            }

            @*<h5><button class="btn-xs">+Follow</button></h5>
        <h5><button class="btn-xs">+Follow</button></h5>
        <h5><button class="btn-xs">+Follow</button></h5>
        <h5><button class="btn-xs">+Follow</button></h5>*@


        </div>

    </div>



</body>


@section Scripts
{
    <script>

        function makeFriendRequest(userId, friendId) {

            $.ajax({
                type: "GET",
                url: "/Home/FriendRequest",
                contentType: "application/json; charset=utf-8",
                data: { 'userId': userId, 'FriendId': friendId },
                dataType: "json",
                success: function (result) {

                    //$(`#request-${friendId}`).remove();

                    $(`#request-${friendId}`).html(result);

                },

            });
        }

        var textboxes = document.querySelectorAll(".txbox");

        textboxes.forEach(function (txtbox) {
            let currentId = txtbox.getAttribute("id");
            txtbox.addEventListener("keyup", function (e) {
                if (e.keyCode == 13) {
                    makeComment(currentId);
                }

            })
        });

        function makeComment(postid) {
            var textofComment = $(`#${postid}`).val();
            if (textofComment!="") {
                $.ajax({
                    type: "GET",
                    url: "/Home/Comment",
                    contentType: "application/json; charset=utf-8",
                    data: { 'postid': postid, 'commentText': textofComment },
                    dataType: "json",
                    success: function (result) {

                        $(`.comments-${postid}`).prepend(`<p id=\"${result.commentId}\">` + result.Name + ":" + textofComment + "\n" + 
                            `<span><button onclick=\"Editcomment(${postid},${result.commentId},'${textofComment}')\" class=\"btn-link\">Edit</button></span>` +"<span class=\"btn-link\">Delete</span>"+ "</p>");
                        $(`#${postid}`).val("");
                    },

                });
                
            }
        }
         
        function submitEdittedcomment(postid, commentid, oldText) {
            var currenCommentbox = $(`#editcomment-${commentid}`).val();
            
            if (currenCommentbox != null) {
                $.ajax({
                    type: "GET",
                    url: "/Home/Editcomment",
                    contentType: "application/json; charset=utf-8",
                    data: { 'postid': postid, 'oldtext': oldText, 'newtext': currenCommentbox },
                    dataType: "json",
                    success: function (result) {
                        $(`#editcomment-${commentid}`).replaceWith(`<p  id=\"${commentid}\" class=\"databasecomments\">${result} : ${currenCommentbox}` + "\n" +
                            `<span><button onclick=\"Editcomment(${postid},${commentid},'${currenCommentbox}')\" class=\"btn-link\">Edit</button></span>` + "<span class=\"btn-link\">Delete</span>"
                        + "</p>");
                        $(`#editcommentbutton-${commentid}`).remove();
                    },

                });
            }
        }
        function Editcomment(postid, commentid, oldText) {

            debugger
            $(`#${commentid}`).replaceWith(`<input class="form-control" type=\"text\" style=\"display:block\" id=\"editcomment-${commentid}\" value=\"${oldText}\"/> \n
            <div><button class="btn btn-primary" id=\"editcommentbutton-${commentid}\" onclick=\"submitEdittedcomment(${postid},${commentid},'${oldText}')\">submit</button></div>`);
            
        }

        function makeLike(postid) {




            $.ajax({
                type: "GET",
                url: "/Home/Like",
                contentType: "application/json; charset=utf-8",
                data: { 'postid': postid },
                //dataType: "json",
                success: function (result) {
                    $(`#likes-${postid}`).html(result + "Likes");
                    
                        
                    $(`#likebtn-${postid}`).toggleClass("activebtn");
                    
                    
                },
                
            });




        }



        function hidecomments(postid) {

            var commentsection = $(`.comments-${postid}`);
            var btn_comment = document.getElementById(`commentbtn-${postid}`);
            if (btn_comment.innerText =="Hide Comments") {
                btn_comment.innerText = "Show Comments"
            }
            else {
                btn_comment.innerText = "Hide Comments"
            }
            commentsection.toggleClass("hidecomments");
        }

        
               
        //function moamen(postid) {
            
        //    var commentsection = document.getElementById(`acomment-${postid}`);
        //    //var commentsection = $(`#acomment-${postid}`);
        //    commentsection.addEventListener("keydown", function (e) {
        //        var key = e.which || e.keyCode;
        //        if (key === 13) {
        //            makeComment(postid);
        //        }
        //    });
        //}



      














        $(document).ready(function () {

            //$('.posts').each(function () {
            //    $("#likebtn").click(function (e) {
            //        var idofPost = $('#postid').val();

            //        $.ajax({
            //            type: "GET",
            //            url: "/Home/Like",
            //            contentType: "application/json; charset=utf-8",
            //            data: { 'postid': idofPost },
            //            dataType: "json",
            //            success: function (result) {
            //                $("#likes").html(result + "Likes");
            //            },

            //        });


            //    });
            //});


            

      
       


            //$('.posts').each(function () {
          
            //    var input = document.getElementById("acomment");
            //    input.addEventListener("keyup",function (event) {
            //        if (event.keyCode === 13) {
            //            var idofPost = $('#postid').val();
            //            var textofComment = $('#acomment').val();


            //            $.ajax({
            //                type: "GET",
            //                url: "/Home/Comment",
            //                contentType: "application/json; charset=utf-8",
            //                data: { 'postid': idofPost, 'commentText': textofComment },
            //                dataType: "json",
            //                success: function (result) {
                               
            //                    $(".comments").prepend("<p>"+result+":"+textofComment+"</p>");
            //                },

            //            });

            //        }

            //    });
            //});




            $("#commentbtn").click(function (e) {

                var commentsinposts = document.querySelector(".databasecomments");
                if (commentsinposts.style.display=="none") {
                    commentsinposts.style.display="block"
                }
                else {
                    commentsinposts.style.display = "none"
                }
            });
           


        });





    </script>
}



